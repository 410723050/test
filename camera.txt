package com.example.myapplication;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.app.Activity;
import android.content.pm.PackageManager;
import android.graphics.Camera;
import android.media.MediaRecorder;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.view.Menu;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import java.io.File;
import java.io.IOException;
import java.util.Objects;

public class MainActivity extends Activity implements View.OnClickListener {


    Button record,stop;
    File viodFile;
    MediaRecorder mRecorder;
    SurfaceView sView;
    boolean isRecording=false;
    Camera camera;


    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        check();

        setContentView(R.layout.activity_main);
        record=(Button)findViewById(R.id.record);
        stop=(Button)findViewById(R.id.stop);
        sView=(SurfaceView)findViewById(R.id.dView);
        stop.setEnabled(false);
        sView.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
        sView.getHolder().setFixedSize(720,1280);
        sView.getHolder().setKeepScreenOn(true);

        record.setOnClickListener(this);
        stop.setOnClickListener(this);

    }




    @Override
    public boolean onCreateOptionsMenu(Menu menu){
            getMenuInflater().inflate(R.menu.main,menu);
            return true;

    }

    @Override
    public void onClick(View view) {
        switch(view.getId()){
            case R.id.record:
                if(!Environment.getExternalStorageState().equals(
                        Environment.MEDIA_MOUNTED)) {
                    Toast.makeText(this, "SD卡不存在，請插卡！", Toast.LENGTH_SHORT).show();
                    return;
                }
                try{
                    mRecorder=new MediaRecorder();
                    mRecorder.reset();
                    String fileName = System.currentTimeMillis() + ".mp4";
                    File voidFile = new File(Environment.getExternalStorageDirectory().getCanonicalFile() , fileName);
                    if(!voidFile.exists())
                        voidFile.createNewFile();
                    mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
                    mRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
                    mRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
                    mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);
                    mRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.DEFAULT);
                    mRecorder.setOrientationHint(90);
                    mRecorder.setOutputFile(voidFile.getAbsolutePath());
                    mRecorder.setPreviewDisplay(sView.getHolder().getSurface());
                    mRecorder.prepare();
                    mRecorder.start();
                    record.setEnabled(false);
                    stop.setEnabled(true);
                    isRecording=true;

                } catch (IOException e) {
                    e.printStackTrace();
                }
                break;
            case R.id.stop:
                if(isRecording){
                    mRecorder.stop();
                    mRecorder.release();
                    mRecorder=null;
                    record.setEnabled(true);
                    stop.setEnabled(false);

                }
                break;
            default:
                    mRecorder=new MediaRecorder();
                    mRecorder.reset();
                    mRecorder.setPreviewDisplay(sView.getHolder().getSurface());
                break;
        }
    }
    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    private void check() {
        if (ContextCompat.checkSelfPermission(Objects.requireNonNull(this), Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED
                || ContextCompat.checkSelfPermission(Objects.requireNonNull(this), Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED
                || ContextCompat.checkSelfPermission(Objects.requireNonNull(this), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED
                || ContextCompat.checkSelfPermission(Objects.requireNonNull(this), Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED
                || ContextCompat.checkSelfPermission(Objects.requireNonNull(this), Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]
                    {
                            Manifest.permission.CAMERA,
                            Manifest.permission.WRITE_EXTERNAL_STORAGE,
                            Manifest.permission.READ_EXTERNAL_STORAGE,
                            Manifest.permission.RECORD_AUDIO,
                            Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS

                    }, 200);
            return;
        }
    }
}